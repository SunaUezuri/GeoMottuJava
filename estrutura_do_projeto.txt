================================================================================
ESTRUTURA DE PASTAS
================================================================================

GeoMottuJava/
└── src/
    ├── main/
    │   ├── java/
    │   │   └── br/
    │   │       └── com/
    │   │           └── geomottu/
    │   │               └── api/
    │   │                   ├── annotations/
    │   │                   │   ├── interfaces/
    │   │                   │   └── object/
    │   │                   ├── config/
    │   │                   │   └── security/
    │   │                   ├── controllers/
    │   │                   ├── dto/
    │   │                   │   ├── endereco/
    │   │                   │   ├── filial/
    │   │                   │   ├── moto/
    │   │                   │   ├── patio/
    │   │                   │   └── usuario/
    │   │                   ├── exceptions/
    │   │                   ├── model/
    │   │                   │   ├── entities/
    │   │                   │   └── enums/
    │   │                   ├── repository/
    │   │                   └── services/
    │   └── resources/
    │       ├── db/
    │       │   └── migration/
    │       ├── static/
    │       │   ├── css/
    │       │   └── js/
    │       └── templates/
    │           └── fragments/
    └── test/
        └── java/
            └── br/
                └── com/
                    └── geomottu/
                        └── api/


================================================================================
ARQUIVO: pom.xml
================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.geomottu</groupId>
	<artifactId>api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>api</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-oracle</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc11</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.38</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>21</source>
					<target>21</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>1.18.38</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/ApiApplication.java
================================================================================

package br.com.geomottu.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiApplication.class, args);
	}

}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/annotations/interfaces/Unique.java
================================================================================

package br.com.geomottu.api.annotations.interfaces;

import br.com.geomottu.api.annotations.object.UniqueValidator;
import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target({ ElementType.FIELD })
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = UniqueValidator.class)
public @interface Unique {
    String message() default "Valor já existe";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};

    String fieldName();       // Campo a ser validado
    Class<?> domainClass();   // Classe da entidade
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/annotations/object/UniqueValidator.java
================================================================================

package br.com.geomottu.api.annotations.object;

import br.com.geomottu.api.annotations.interfaces.Unique;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

public class UniqueValidator implements ConstraintValidator<Unique, Object> {

    @PersistenceContext
    private EntityManager entityManager;

    private String fieldName;
    private Class<?> domainClass;

    @Override
    public void initialize(Unique constraintAnnotation) {
        this.fieldName = constraintAnnotation.fieldName();
        this.domainClass = constraintAnnotation.domainClass();
    }

    @Override
    public boolean isValid(Object value, ConstraintValidatorContext context) {
        if (value == null) return true;

        String jpql = String.format("SELECT COUNT(e) FROM %s e WHERE e.%s = :value",
                domainClass.getSimpleName(), fieldName);

        Long count = entityManager.createQuery(jpql, Long.class)
                .setParameter("value", value)
                .getSingleResult();

        return count == 0;
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/config/security/AutenticacaoService.java
================================================================================

package br.com.geomottu.api.config.security;

import br.com.geomottu.api.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class AutenticacaoService implements UserDetailsService {

    @Autowired
    private UsuarioRepository usuarioRepository;


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return usuarioRepository.findByNomeIgnoreCase(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuário: " + username + ". Não encontrado"));
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/config/security/SecurityConfig.java
================================================================================

package br.com.geomottu.api.config.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .authorizeHttpRequests(a -> a
                        // Permite acesso público à página de login e recursos estáticos
                        .requestMatchers("/login", "/css/**", "/js/**", "/images/**").permitAll()
                        // Apenas ADMIN pode acessar as páginas de filiais
                        .requestMatchers("/filiais/**", "/admin/**").hasRole("ADMIN")

                        // Apenas ADMIN pode usar DELETE, PUT, ou PATCH em pátios e motos
                        .requestMatchers(HttpMethod.DELETE, "/patios/**", "/motos/**").hasRole("ADMIN")
                        .requestMatchers(HttpMethod.PUT, "/patios/**", "/motos/**").hasRole("ADMIN")
                        .requestMatchers(HttpMethod.PATCH, "/patios/**", "/motos/**").hasRole("ADMIN")

                        // ADMIN e USER podem usar GET e POST
                        .requestMatchers(HttpMethod.GET, "/patios/**", "/motos/**").hasAnyRole("ADMIN", "USER")
                        .requestMatchers(HttpMethod.POST, "/patios/**", "/motos/**").hasAnyRole("ADMIN", "USER")

                        .anyRequest().authenticated()
                )
                .formLogin(form -> form
                        .loginPage("/login")
                        .defaultSuccessUrl("/", true)
                        .permitAll())
                .logout(logout -> logout
                        .logoutUrl("/logout")
                        .logoutSuccessUrl("/login?logout")
                        .permitAll())
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/config/security/SecurityUtils.java
================================================================================

package br.com.geomottu.api.config.security;

import br.com.geomottu.api.model.entities.Usuario;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

@Component
public class SecurityUtils {

    public Usuario getUsuarioLogado() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null  || !authentication.isAuthenticated() || "anonymousUser".equals(authentication.getPrincipal())) {
            throw new IllegalStateException("Nenhum usuário autenticado encontrado");
        }

        return (Usuario) authentication.getPrincipal();
    }

    public boolean isAdmin(Usuario usuario) {
            return usuario.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_ADMIN"));
    }

    public void checkAdminAccess() {
        if (!isAdmin(getUsuarioLogado())) {
            throw new AccessDeniedException("Acesso negado. Operação permitida apenas para administradores.");
        }
    }

    public void checkAdminOrOwnerAccess(Long resourceOwnerId) {
        Usuario usuarioLogado = getUsuarioLogado();
        if (!isAdmin(usuarioLogado) && !usuarioLogado.getId().equals(resourceOwnerId)) {
            throw new AccessDeniedException("Acesso negado. Você não tem permissão para modificar este recurso.");
        }
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/AdminController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.services.MotoService;
import br.com.geomottu.api.services.PatioService;
import br.com.geomottu.api.services.UsuarioService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/admin")
@RequiredArgsConstructor
public class AdminController {

    private final UsuarioService usuarioService;
    private final PatioService patioService;
    private final MotoService motoService;

    @GetMapping("/dashboard")
    public String showDashboard(Model model, RedirectAttributes redirectAttributes) {
        try {
            // Chama os métodos de agregação que criamos nos serviços
            model.addAttribute("totalUsuarios", usuarioService.countTotal());
            model.addAttribute("totalPatios", patioService.countTotal());
            model.addAttribute("totalMotos", motoService.countTotal());
            model.addAttribute("motosPorEstado", motoService.countByEstado());

            // Retorna o caminho para o template do dashboard
            return "admin/dashboard";

        } catch (Exception e) {
            // Em caso de um erro inesperado ao buscar os dados, redireciona para a home
            redirectAttributes.addFlashAttribute("errorMessage", "Não foi possível carregar os dados do dashboard.");
            return "redirect:/";
        }
    }
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/FilialController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.dto.filial.FilialDto;
import br.com.geomottu.api.services.FilialService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/filiais")
@RequiredArgsConstructor
public class FilialController {

    private final FilialService filialService;

    @GetMapping
    public String listAll(Model model) {
        model.addAttribute("filiais", filialService.getAll());
        return "filiais/lista";
    }

    @GetMapping("/nova")
    public String showCreateForm(Model model) {
        model.addAttribute("filialDto", new FilialDto(null, null, null, null, null));
        return "filiais/form";
    }

    @PostMapping("/nova")
    public String createFilial(@ModelAttribute("filialDto") FilialDto dto, RedirectAttributes redirectAttributes) {
        try {
            filialService.save(dto);
            redirectAttributes.addFlashAttribute("successMessage", "Filial criada com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao criar filial: " + e.getMessage());
        }
        return "redirect:/filiais";
    }

    @GetMapping("/{id}/editar")
    public String showUpdateForm(@PathVariable Long id, Model model) {
        try {
            model.addAttribute("filial", filialService.getById(id));
            return "filiais/form";
        } catch (Exception e) {
            return "redirect:/filiais";
        }
    }

    @PostMapping("/{id}/editar")
    public String updateFilial(@PathVariable Long id, @ModelAttribute("filialDto") FilialDto dto, RedirectAttributes redirectAttributes) {
        try {
            filialService.update(id, dto);
            redirectAttributes.addFlashAttribute("successMessage", "Filial atualizada com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao atualizar filial: " + e.getMessage());
        }
        return "redirect:/filiais";
    }

    @PostMapping("/{id}/deletar")
    public String deleteFilial(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            filialService.delete(id);
            redirectAttributes.addFlashAttribute("successMessage", "Filial deletada com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao deletar filial: " + e.getMessage());
        }
        return "redirect:/filiais";
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/HomeController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.dto.usuario.UsuarioDto;
import br.com.geomottu.api.repository.FilialRepository;
import br.com.geomottu.api.services.UsuarioService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequiredArgsConstructor
public class HomeController {

    private final UsuarioService usuarioService;
    private final FilialRepository filialRepository;

    @GetMapping("/")
    public String home() {
        return "home";
    }

    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }

    @GetMapping("/acesso-negado")
    public String accessDeniedPage() {
        return "acesso-negado";
    }

    @GetMapping("/registrar")
    public String showRegistrationForm(Model model) {
        // Garante que o formulário tenha um objeto para vincular os dados
        if (!model.containsAttribute("usuarioDto")) {
            model.addAttribute("usuarioDto", new UsuarioDto(null, null, null, null));
        }
        model.addAttribute("filiais", filialRepository.findAll());
        return "registro";
    }

    @PostMapping("/registrar")
    public String registerUser(@Valid @ModelAttribute("usuarioDto") UsuarioDto usuarioDto,
                               BindingResult result,
                               RedirectAttributes redirectAttributes,
                               Model model) {
        if (result.hasErrors()) {
            // Se houver erros de validação, retorna para o formulário, mantendo os dados
            model.addAttribute("filiais", filialRepository.findAll());
            return "registro";
        }
        try {
            usuarioService.register(usuarioDto);
            redirectAttributes.addFlashAttribute("successMessage", "Cadastro realizado com sucesso! Faça o login.");
            return "redirect:/login";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao realizar cadastro: " + e.getMessage());
            return "redirect:/registrar";
        }
    }
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/MotoController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.dto.moto.MotoDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.model.entities.Moto;
import br.com.geomottu.api.services.MotoService;
import br.com.geomottu.api.services.PatioService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/motos")
@RequiredArgsConstructor
public class MotoController {

    private final MotoService motoService;
    private final PatioService patioService;

    @GetMapping
    public String listAll(Model model) {
        model.addAttribute("motos", motoService.getAll());
        return "motos/lista";
    }

    @GetMapping("/nova")
    public String showCreateForm(Model model) {
        model.addAttribute("motoDto", new MotoDto(null, null, null, null, null));
        model.addAttribute("patios", patioService.getAll());
        return "motos/form";
    }

    @PostMapping("/nova")
    public String createMoto(@Valid @ModelAttribute("motoDto") MotoDto dto,
                             BindingResult result,
                             RedirectAttributes redirectAttributes,
                             Model model) {
        if (result.hasErrors()) {
            model.addAttribute("patios", patioService.getAll());
            return "motos/form";
        }
        try {
            motoService.save(dto);
            redirectAttributes.addFlashAttribute("successMessage", "Moto criada com sucesso!");
            return "redirect:/motos";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao criar moto: " + e.getMessage());
            return "redirect:/motos/nova";
        }
    }

    @GetMapping("/{id}/editar")
    public String showUpdateForm(@PathVariable Long id, Model model, RedirectAttributes redirectAttributes) {
        try {
            Moto moto = motoService.getById(id);
            // Converte a entidade para o DTO para preencher o formulário
            MotoDto dto = new MotoDto(moto.getPlaca(), moto.getChassi(), moto.getTipoMoto(), moto.getEstadoMoto(), moto.getPatio().getId());
            model.addAttribute("motoDto", dto);
            model.addAttribute("motoId", id);
            model.addAttribute("patios", patioService.getAll()); // Admin pode ver todos os pátios para realocar a moto
            return "motos/form";
        } catch (IdNaoEncontradoException e) {
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/motos";
        }
    }

    @PostMapping("/{id}/editar")
    public String updateMoto(@PathVariable Long id,
                             @Valid @ModelAttribute("motoDto") MotoDto dto,
                             BindingResult result,
                             RedirectAttributes redirectAttributes,
                             Model model) {
        if (result.hasErrors()) {
            model.addAttribute("motoId", id);
            model.addAttribute("patios", patioService.getAll());
            return "motos/form";
        }
        try {
            motoService.update(id, dto);
            redirectAttributes.addFlashAttribute("successMessage", "Moto atualizada com sucesso!");
            return "redirect:/motos";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao atualizar moto: " + e.getMessage());
            return "redirect:/motos/" + id + "/editar";
        }
    }

    @PostMapping("/{id}/deletar")
    public String deleteMoto(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            motoService.delete(id);
            redirectAttributes.addFlashAttribute("successMessage", "Moto deletada com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao deletar moto: " + e.getMessage());
        }
        return "redirect:/motos";
    }
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/PatioController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.patio.PatioDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.model.entities.Patio;
import br.com.geomottu.api.services.FilialService;
import br.com.geomottu.api.services.PatioService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/patios")
@RequiredArgsConstructor
public class PatioController {

    private final PatioService patioService;
    private final FilialService filialService;
    private final SecurityUtils securityUtils;

    @GetMapping
    public String listAll(Model model) {
        model.addAttribute("patios", patioService.getAll());
        return "patios/lista";
    }

    @GetMapping("/novo")
    public String showCreateForm(Model model) {
        model.addAttribute("patioDto", new PatioDto(null, null, null));
        // Se o usuário for admin, precisa da lista de filiais para o formulário
        if (securityUtils.isAdmin(securityUtils.getUsuarioLogado())) {
            try {
                model.addAttribute("filiais", filialService.getAll());
            } catch (Exception e) {
                // Lidar com o caso de não encontrar filiais, se necessário
                model.addAttribute("filiais", List.of());
            }
        }
        return "patios/form";
    }

    @PostMapping("/novo")
    public String createPatio(@Valid @ModelAttribute("patioDto") PatioDto dto,
                              BindingResult result,
                              RedirectAttributes redirectAttributes,
                              Model model) {
        if (result.hasErrors()) {
            // Se houver erros de validação, recarrega a lista de filiais para o admin
            if (securityUtils.isAdmin(securityUtils.getUsuarioLogado())) {
                model.addAttribute("filiais", filialService.getAll());
            }
            return "patios/form";
        }
        try {
            patioService.save(dto);
            redirectAttributes.addFlashAttribute("successMessage", "Pátio criado com sucesso!");
            return "redirect:/patios";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao criar pátio: " + e.getMessage());
            return "redirect:/patios/novo";
        }
    }

    @GetMapping("/{id}/editar")
    public String showUpdateForm(@PathVariable Long id, Model model, RedirectAttributes redirectAttributes) {
        try {
            Patio patio = patioService.getById(id);
            // Converte a entidade para o DTO para preencher o formulário
            PatioDto dto = new PatioDto(patio.getNome(), patio.getCapacidadeTotal(), patio.getFilial().getId());
            model.addAttribute("patioDto", dto);
            model.addAttribute("patioId", id);
            model.addAttribute("filiais", filialService.getAll()); // Admin sempre pode ver todas as filiais
            return "patios/form";
        } catch (IdNaoEncontradoException e) {
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/patios";
        }
    }

    @PostMapping("/{id}/editar")
    public String updatePatio(@PathVariable Long id,
                              @Valid @ModelAttribute("patioDto") PatioDto dto,
                              BindingResult result,
                              RedirectAttributes redirectAttributes,
                              Model model) {
        if (result.hasErrors()) {
            model.addAttribute("patioId", id);
            model.addAttribute("filiais", filialService.getAll());
            return "patios/form";
        }
        try {
            patioService.update(id, dto);
            redirectAttributes.addFlashAttribute("successMessage", "Pátio atualizado com sucesso!");
            return "redirect:/patios";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao atualizar pátio: " + e.getMessage());
            return "redirect:/patios/" + id + "/editar";
        }
    }

    @PostMapping("/{id}/deletar")
    public String deletePatio(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            patioService.delete(id);
            redirectAttributes.addFlashAttribute("successMessage", "Pátio deletado com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao deletar pátio: " + e.getMessage());
        }
        return "redirect:/patios";
    }
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/controllers/UsuarioController.java
================================================================================

package br.com.geomottu.api.controllers;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.usuario.UpdateRoleDto;
import br.com.geomottu.api.dto.usuario.UsuarioDto;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.services.UsuarioService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/usuarios")
@RequiredArgsConstructor
public class UsuarioController {

    private final UsuarioService usuarioService;
    private final SecurityUtils securityUtils;

    // ADMIN: Lista todos os usuários
    @GetMapping
    public String listAll(Model model) {
        model.addAttribute("usuarios", usuarioService.getAll());
        return "usuarios/lista";
    }

    // USER e ADMIN: Mostra o próprio perfil
    @GetMapping("/perfil")
    public String viewProfile(Model model) {
        try {
            Usuario usuarioLogado = securityUtils.getUsuarioLogado();
            model.addAttribute("usuario", usuarioService.getById(usuarioLogado.getId()));
            return "usuarios/perfil";
        } catch (Exception e) {
            return "redirect:/";
        }
    }

    // USER e ADMIN: Página para editar o perfil
    @GetMapping("/{id}/editar")
    public String showUpdateForm(@PathVariable Long id, Model model, RedirectAttributes redirectAttributes) {
        try {
            Usuario usuario = usuarioService.getById(id);
            UsuarioDto dto = new UsuarioDto(usuario.getNome(), usuario.getTipoPerfil(), "", usuario.getFilial().getId());
            model.addAttribute("usuario", usuario);
            model.addAttribute("usuarioDto", dto);
            return "usuarios/form";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
            return "redirect:/";
        }
    }

    // USER e ADMIN: Processa a atualização do perfil
    @PostMapping("/{id}/editar")
    public String updateUser(@PathVariable Long id, @ModelAttribute("usuarioDto") UsuarioDto dto, RedirectAttributes redirectAttributes) {
        try {
            usuarioService.update(id, dto);
            redirectAttributes.addFlashAttribute("successMessage", "Perfil atualizado com sucesso!");
            return "redirect:/usuarios/perfil";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao atualizar perfil: " + e.getMessage());
            return "redirect:/usuarios/" + id + "/editar";
        }
    }

    // ADMIN: Processa a mudança de perfil de um usuário
    @PostMapping("/{id}/role")
    public String updateUserRole(@PathVariable Long id, @ModelAttribute("updateRoleDto") UpdateRoleDto dto, RedirectAttributes redirectAttributes) {
        try {
            usuarioService.updateRole(id, dto);
            redirectAttributes.addFlashAttribute("successMessage", "Perfil do usuário atualizado com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao atualizar perfil: " + e.getMessage());
        }
        return "redirect:/usuarios";
    }

    // USER e ADMIN: Deleta o próprio perfil (ou qualquer um se for admin)
    @PostMapping("/{id}/deletar")
    public String deleteUser(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            Usuario usuarioLogado = securityUtils.getUsuarioLogado();
            usuarioService.delete(id);

            if (usuarioLogado.getId().equals(id)) {
                return "redirect:/logout";
            }
            redirectAttributes.addFlashAttribute("successMessage", "Usuário deletado com sucesso!");
            return "redirect:/usuarios";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Erro ao deletar usuário: " + e.getMessage());
            return "redirect:/usuarios";
        }
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/endereco/EnderecoDto.java
================================================================================

package br.com.geomottu.api.dto.endereco;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public record EnderecoDto(
        @NotBlank(message = "O estado não pode estar vazio")
        String estado,
        @NotBlank(message = "A sigla do estado não pode estar vazia")
        @Size(max = 2, message = "A sigla não pode ter mais de 2 caracteres")
        String siglaEstado,
        @NotBlank(message = "A cidade não pode estar vazia")
        String cidade,
        @NotBlank(message = "A rua não pode estar vazia")
        String rua
) {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/filial/FilialDto.java
================================================================================

package br.com.geomottu.api.dto.filial;

import br.com.geomottu.api.dto.endereco.EnderecoDto;
import br.com.geomottu.api.model.entities.Patio;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.model.enums.PaisesFilial;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.List;

public record FilialDto(
        @NotBlank(message = "O nome não pode estar vazio")
        String nome,
        @NotNull(message = "O campo pais é obrigatório")
        PaisesFilial pais,
        @NotNull(message = "O endereço é obrigatório") @Valid
        EnderecoDto endereco,
        @Size(max = 15, message = "O telefone deve ter no máximo 15 caracteres")
        String telefone,
        @Email(message = "O formato de email está incorreto")
        @Size(max = 30, message = "O máximo de caracteres do email deve ser 30")
        String email

) {
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/filial/FilialGetDto.java
================================================================================

package br.com.geomottu.api.dto.filial;

import br.com.geomottu.api.model.entities.Endereco;
import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.model.enums.PaisesFilial;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.model.entities.Patio;

import java.util.List;

public record FilialGetDto(
        Long id,
        String nome,
        PaisesFilial pais,
        Endereco endereco,
        String telefone,
        String email,
        List<String> usuarios,
        List<String> patios
) {
    public FilialGetDto(Filial filial) {
        this(filial.getId(), filial.getNome(), filial.getPais(), filial.getEndereco(), filial.getTelefone(),
                filial.getEmail(), filial.getUsuarios().stream().map(Usuario::getNome).toList(),
                filial.getPatios().stream().map(Patio::getNome).toList());
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/moto/MotoDto.java
================================================================================

package br.com.geomottu.api.dto.moto;

import br.com.geomottu.api.annotations.interfaces.Unique;
import br.com.geomottu.api.model.entities.Moto;
import br.com.geomottu.api.model.enums.EstadoMoto;
import br.com.geomottu.api.model.enums.TipoMoto;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

public record MotoDto(
        @Size(min = 7, max = 8, message = "A placa deve conter 8 caracters")
        @Unique(fieldName = "placa", domainClass = Moto.class, message = "Placa já cadastrada")
        String placa,
        @Size(max = 50, message = "O Chassi só pode ter no máximo 50 caractéres")
        @Unique(fieldName = "chassi", domainClass = Moto.class, message = "Chassi já cadastrado")
        String chassi,
        @NotNull
        TipoMoto tipoMoto,
        @NotNull
        EstadoMoto estadoMoto,
        Long patioId
) {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/moto/MotoGetDto.java
================================================================================

package br.com.geomottu.api.dto.moto;

import br.com.geomottu.api.model.entities.Moto;
import br.com.geomottu.api.model.enums.EstadoMoto;
import br.com.geomottu.api.model.enums.TipoMoto;

public record MotoGetDto(
        Long id,
        String placa,
        String chassi,
        TipoMoto tipoMoto,
        EstadoMoto estadoMoto,
        Long patioId
) {
    public MotoGetDto(Moto moto) {
        this(moto.getId(), moto.getPlaca(), moto.getChassi(),
                moto.getTipoMoto(), moto.getEstadoMoto(), moto.getPatio().getId());
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/patio/PatioDto.java
================================================================================

package br.com.geomottu.api.dto.patio;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

public record PatioDto(
        @Size(max = 50, message = "O nome só pode ter no máximo 50 caracteres")
        String nome,
        @NotNull(message = "A capacidade não pode ser nula")
        Integer capacidadeTotal,
        Long filialId
) {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/patio/PatioGetDto.java
================================================================================

package br.com.geomottu.api.dto.patio;

import br.com.geomottu.api.model.entities.Patio;
import br.com.geomottu.api.model.entities.Moto;

import java.util.List;

public record PatioGetDto(
        Long id,
        String nome,
        Integer capacidadeTotal,
        Long filialId,
        List<String> motos

) {
    public PatioGetDto(Patio patio) {
        this(patio.getId(), patio.getNome(), patio.getCapacidadeTotal(),
                patio.getFilial().getId(), patio.getMotos().stream().map(Moto::getPlaca).toList());
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/usuario/UpdateRoleDto.java
================================================================================

package br.com.geomottu.api.dto.usuario;

import jakarta.validation.constraints.NotNull;

public record UpdateRoleDto(
        @NotNull(message = "O tipo de perfil não pode ser nulo.")
        Integer tipoPerfil
) {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/usuario/UsuarioDto.java
================================================================================

package br.com.geomottu.api.dto.usuario;

import br.com.geomottu.api.annotations.interfaces.Unique;
import br.com.geomottu.api.model.entities.Usuario;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public record UsuarioDto(
        @NotBlank(message = "O nome não pode estar vazio")
        @Size(max = 25, message = "O máximo de caracteres do nome é 25")
        @Unique(fieldName = "nome", domainClass = Usuario.class, message = "Usuário já cadastrado")
        String nome,
        Integer tipoPerfil,
        @NotBlank(message = "A senha não pode ser nula")
        @Size(min = 6, max = 100, message = "A senha deve ter entre 6 e 100 caracteres")
        String senha,
        Long filialId
) {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/dto/usuario/UsuarioGetDto.java
================================================================================

package br.com.geomottu.api.dto.usuario;

import br.com.geomottu.api.model.entities.Usuario;

public record UsuarioGetDto(
        Long id,
        String nome,
        String senha,
        Integer tipoPerfil,
        Long filial
) {
    public UsuarioGetDto(Usuario usuario){
        this(usuario.getId(), usuario.getNome(), usuario.getSenha(), usuario.getTipoPerfil(), usuario.getFilial().getId());
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/exceptions/IdNaoEncontradoException.java
================================================================================

package br.com.geomottu.api.exceptions;

public class IdNaoEncontradoException extends Exception{

    public IdNaoEncontradoException(){
        super("Não foi possível localizar um objeto com este Id");
    }

    public IdNaoEncontradoException(String mensagem) {
        super(mensagem);
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/exceptions/PlacaNaoEncontradaException.java
================================================================================

package br.com.geomottu.api.exceptions;

public class PlacaNaoEncontradaException extends Exception{

    public PlacaNaoEncontradaException(){
        super("Não foi possível localizar um objeto com esta placa");
    }

    public PlacaNaoEncontradaException(String mensagem) {
        super(mensagem);
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/exceptions/UsuarioJaCadastradoException.java
================================================================================

package br.com.geomottu.api.exceptions;

public class UsuarioJaCadastradoException extends Exception{

    public UsuarioJaCadastradoException(){
        super("Nome de usuário já está em uso");
    }

    public UsuarioJaCadastradoException(String message){
        super(message);
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/entities/Endereco.java
================================================================================

package br.com.geomottu.api.model.entities;

import br.com.geomottu.api.dto.endereco.EnderecoDto;
import jakarta.persistence.Embeddable;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Embeddable
@AllArgsConstructor
@NoArgsConstructor
@Getter @Setter
public class Endereco {

    private String estado;
    private String siglaEstado;
    private String cidade;
    private String rua;

    public Endereco(EnderecoDto json){
        this.estado = json.estado();
        this.siglaEstado = json.siglaEstado();
        this.cidade = json.cidade();
        this.rua = json.rua();
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/entities/Filial.java
================================================================================

package br.com.geomottu.api.model.entities;

import br.com.geomottu.api.dto.filial.FilialDto;
import br.com.geomottu.api.model.enums.PaisesFilial;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;

@Entity
@Table(name = "T_GEOMOTTU_FILIAL")
@Getter @Setter
@NoArgsConstructor
@AllArgsConstructor
@SequenceGenerator(name = "filial", sequenceName = "SQ_T_GEOMOTTU_FILIAL", allocationSize = 1)
public class Filial {

    @Id @Column(name = "id_filial")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "filial")
    private Long id;

    @Column(name = "nm_filial", nullable = false)
    private String nome;

    @Enumerated(EnumType.STRING)
    @Column(name = "pais_filial", nullable = false)
    private PaisesFilial pais;

    @Embedded
    private Endereco endereco;

    @Column(name = "nm_telefone", length = 15)
    private String telefone;

    @Column(name = "ds_email", length = 30)
    private String email;

    @OneToMany(mappedBy = "filial", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Usuario> usuarios;

    @OneToMany(mappedBy = "filial", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    private List<Patio> patios;

    public Filial(FilialDto json) {
        this.nome = json.nome();
        this.pais = json.pais();
        this.endereco = new Endereco(json.endereco());
        this.telefone = json.telefone();
        this.email = json.email();
    }

}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/entities/Moto.java
================================================================================

package br.com.geomottu.api.model.entities;

import br.com.geomottu.api.dto.moto.MotoDto;
import br.com.geomottu.api.model.enums.EstadoMoto;
import br.com.geomottu.api.model.enums.TipoMoto;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "T_GEOMOTTU_MOTO")
@Getter @Setter
@AllArgsConstructor
@NoArgsConstructor
@SequenceGenerator(name = "moto", sequenceName = "SQ_T_GEOMOTTU_MOTO", allocationSize = 1)
public class Moto {

    @Id @Column(name = "id_moto")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "moto")
    private Long id;

    @Column(name = "nr_placa", length = 8, unique = true)
    private String placa;

    @Column(name = "nr_chassi", length = 50, unique = true)
    private String chassi;

    @Enumerated(EnumType.STRING)
    @Column(name = "tp_modelo", nullable = false)
    private TipoMoto tipoMoto;

    @Enumerated(EnumType.STRING)
    @Column(name = "st_operacional", nullable = false)
    private EstadoMoto estadoMoto;

    @ManyToOne
    @JoinColumn(name = "id_patio")
    private Patio patio;

    public Moto(MotoDto dto, Patio patio) {
        this.placa = dto.placa();
        this.chassi = dto.chassi();
        this.tipoMoto = dto.tipoMoto();
        this.estadoMoto = dto.estadoMoto();
        this.patio = patio;
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/entities/Patio.java
================================================================================

package br.com.geomottu.api.model.entities;

import br.com.geomottu.api.dto.patio.PatioDto;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;

@Entity
@Table(name = "T_GEOMOTTU_PATIO")
@SequenceGenerator(name = "patio", sequenceName = "SQ_T_GEOMOTTU_PATIO", allocationSize = 1)
@AllArgsConstructor
@NoArgsConstructor
@Getter @Setter
public class Patio {

    @Id
    @Column(name = "id_patio")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "patio")
    private Long id;

    @Column(name = "nm_patio", length = 50)
    private String nome;

    @Column(nullable = false, precision = 4, name = "nr_capacidade")
    private Integer capacidadeTotal;

    @ManyToOne
    @JoinColumn(name = "id_filial")
    private Filial filial;

    @OneToMany(mappedBy = "patio", fetch = FetchType.EAGER)
    private List<Moto> motos;

    public Patio(PatioDto dto){
        this.nome = dto.nome();
        this.capacidadeTotal = dto.capacidadeTotal();
    }
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/entities/Usuario.java
================================================================================

package br.com.geomottu.api.model.entities;

import br.com.geomottu.api.dto.usuario.UsuarioDto;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Entity
@Table(name = "T_GEOMOTTU_USUARIO")
@SequenceGenerator(name = "user", sequenceName = "SQ_T_GEOMOTTU_USUARIO", allocationSize = 1)
@Getter @Setter
@NoArgsConstructor
@AllArgsConstructor
public class Usuario implements UserDetails {

    @Id
    @Column(name = "id_usuario")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user")
    private Long id;

    @Column(name = "nm_usuario", unique = true, nullable = false, length = 25)
    private String nome;

    @Column(name = "ds_senha", nullable = false, length = 100)
    private String senha;

    @Column(name = "tp_perfil", nullable = false, precision = 1)
    private Integer tipoPerfil;

    @ManyToOne
    @JoinColumn(name = "id_filial")
    private Filial filial;

    public Usuario(UsuarioDto json, Filial filial) {
        this.nome = json.nome();
        this.senha = json.senha();
        this.tipoPerfil = json.tipoPerfil();
        this.filial = filial;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        if (this.tipoPerfil == 1) {
            return List.of(new SimpleGrantedAuthority("ROLE_ADMIN"));
        }
        return List.of(new SimpleGrantedAuthority("ROLE_USER"));
    }

    @Override
    public String getPassword() {
        return this.senha;
    }

    @Override
    public String getUsername() {
        return this.nome;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/enums/EstadoMoto.java
================================================================================

package br.com.geomottu.api.model.enums;

public enum EstadoMoto {

    MANUTENCAO,
    LIVRE,
    ALUGADA

}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/enums/PaisesFilial.java
================================================================================

package br.com.geomottu.api.model.enums;

public enum PaisesFilial {
    BRASIL,
    MEXICO
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/model/enums/TipoMoto.java
================================================================================

package br.com.geomottu.api.model.enums;

public enum TipoMoto {

    MOTTUE,
    MOTTUSPORT,
    MOTTUPOP
}

================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/repository/FilialRepository.java
================================================================================

package br.com.geomottu.api.repository;

import br.com.geomottu.api.model.entities.Filial;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FilialRepository extends JpaRepository<Filial, Long> {
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/repository/MotoRepository.java
================================================================================

package br.com.geomottu.api.repository;

import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.model.entities.Moto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface MotoRepository extends JpaRepository<Moto, Long> {

    Optional<Moto> findByPlacaIgnoreCase(String placa);
    Optional<Moto> findByChassiIgnoreCase(String chassi);

    @Query("SELECT m FROM Moto m WHERE m.patio.filial = :filial")
    List<Moto> findAllByFilial(@Param("filial") Filial filial);

    @Query("SELECT m FROM Moto m WHERE m.id = :id AND m.patio.filial = :filial")
    Optional<Moto> findByIdAndFilial(@Param("id") Long id, @Param("filial") Filial filial);

    @Query("SELECT m FROM Moto m WHERE upper(m.placa) = upper(:placa) AND m.patio.filial = :filial")
    Optional<Moto> findByPlacaIgnoreCaseAndFilial(@Param("placa") String placa, @Param("filial") Filial filial);

    @Query("SELECT m FROM Moto m WHERE upper(m.chassi) = upper(:chassi) AND m.patio.filial = :filial")
    Optional<Moto> findByChassiIgnoreCaseAndFilial(@Param("chassi") String chassi, @Param("filial") Filial filial);

    @Query("SELECT m.estadoMoto as estado, COUNT(m) as total FROM Moto m GROUP BY m.estadoMoto")
    List<Map<String, Object>> countMotosByEstado();
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/repository/PatioRepository.java
================================================================================

package br.com.geomottu.api.repository;

import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.model.entities.Patio;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Optional;

public interface PatioRepository extends JpaRepository<Patio, Long> {
    List<Patio> findAllByFilial(Filial filial);
    Optional<Patio> findByIdAndFilial(Long id, Filial filial);

}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/repository/UsuarioRepository.java
================================================================================

package br.com.geomottu.api.repository;

import br.com.geomottu.api.model.entities.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UsuarioRepository extends JpaRepository<Usuario, Long> {
    Optional<Usuario> findByNomeIgnoreCase(String nome);
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/services/FilialService.java
================================================================================

package br.com.geomottu.api.services;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.filial.FilialDto;
import br.com.geomottu.api.dto.filial.FilialGetDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.model.entities.Endereco;
import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.repository.FilialRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class FilialService {

    private final FilialRepository filialRepository;
    private final SecurityUtils securityUtils;

    public Filial save(FilialDto dto) {
        securityUtils.checkAdminAccess();

        Filial filial = new Filial(dto);

        return filialRepository.save(filial);
    }

    public List<Filial> getAll() {
        securityUtils.checkAdminAccess();
        return filialRepository.findAll();
    }

    public Filial getById(Long id) throws IdNaoEncontradoException {
        securityUtils.checkAdminAccess();
        return filialRepository.findById(id)
                .orElseThrow(() -> new IdNaoEncontradoException("Filial não encontrada com ID: " + id));
    }

    public Filial update(Long id, FilialDto dto) throws IdNaoEncontradoException {
        securityUtils.checkAdminAccess();
        Filial filial = getById(id);

        filial.setNome(dto.nome());
        filial.setPais(dto.pais());
        filial.setEndereco(new Endereco(dto.endereco()));
        filial.setTelefone(dto.telefone());
        filial.setEmail(dto.email());

        return filialRepository.save(filial);
    }

    public void delete(Long id) throws IdNaoEncontradoException {
        securityUtils.checkAdminAccess();
        Filial filial = getById(id);

        filialRepository.delete(filial);
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/services/MotoService.java
================================================================================

package br.com.geomottu.api.services;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.moto.MotoDto;
import br.com.geomottu.api.dto.moto.MotoGetDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.exceptions.PlacaNaoEncontradaException;
import br.com.geomottu.api.model.entities.Moto;
import br.com.geomottu.api.model.entities.Patio;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.repository.PatioRepository;
import br.com.geomottu.api.repository.MotoRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

@Service
@RequiredArgsConstructor
public class MotoService {

    private final MotoRepository motoRepository;
    private final PatioRepository patioRepository;
    private final SecurityUtils securityUtils;

    public Moto save(MotoDto dto) throws IdNaoEncontradoException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        Patio patio = patioRepository.findById(dto.patioId())
                .orElseThrow(() -> new IdNaoEncontradoException("Filial não encontrada com ID: " + dto.patioId()));

        if (!securityUtils.isAdmin(usuarioLogado)) {
            if (!patio.getFilial().equals(usuarioLogado.getFilial())) {
                throw new AccessDeniedException("Acesso negado. Você só pode adicionar motos a pátios da sua filial.");
            }
        }

        Moto moto = new Moto(dto, patio);

        return motoRepository.save(moto);
    }

    public List<Moto> getAll() {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return motoRepository.findAll();
        } else {
            return motoRepository.findAllByFilial(usuarioLogado.getFilial());
        }
    }

    public Moto getById(Long id) throws IdNaoEncontradoException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return motoRepository.findById(id)
                    .orElseThrow(() -> new IdNaoEncontradoException("Moto não encontrada com ID: " + id));
        } else {
            return motoRepository.findByIdAndFilial(id, usuarioLogado.getFilial())
                    .orElseThrow(() -> new IdNaoEncontradoException("Moto não encontrada ou não pertence à sua filial. ID: " + id));
        }
    }

    public Moto getByPlaca(String placa) throws PlacaNaoEncontradaException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return motoRepository.findByPlacaIgnoreCase(placa)
                    .orElseThrow(() -> new PlacaNaoEncontradaException("Moto não encontrada com placa: " + placa));
        } else {
            return motoRepository.findByPlacaIgnoreCaseAndFilial(placa, usuarioLogado.getFilial())
                    .orElseThrow(() -> new PlacaNaoEncontradaException("Moto não encontrada ou não pertence à sua filial. Placa: " + placa));
        }
    }

    public Moto getByChassi(String chassi) {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return motoRepository.findByChassiIgnoreCase(chassi)
                    .orElseThrow(() -> new NoSuchElementException("Moto não encontrada com chassi: " + chassi));
        } else {
            return motoRepository.findByChassiIgnoreCaseAndFilial(chassi, usuarioLogado.getFilial())
                    .orElseThrow(() -> new NoSuchElementException("Moto não encontrada ou não pertence à sua filial. Chassi: " + chassi));
        }
    }

    public Moto update(Long id, MotoDto dto) throws IdNaoEncontradoException {

        Moto moto = getById(id);

        Patio patio = patioRepository.findById(dto.patioId())
                .orElseThrow(() -> new NoSuchElementException("Pátio não encontrado com ID: " + dto.patioId()));

        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (!securityUtils.isAdmin(usuarioLogado)) {
            if (!patio.getFilial().equals(usuarioLogado.getFilial())) {
                throw new AccessDeniedException("Usuários não podem mover uma moto para um pátio de outra filial.");
            }
        }

        moto.setPlaca(dto.placa());
        moto.setChassi(dto.chassi());
        moto.setTipoMoto(dto.tipoMoto());
        moto.setEstadoMoto(dto.estadoMoto());
        moto.setPatio(patio);

        return motoRepository.save(moto);
    }

    public void delete(Long id) throws IdNaoEncontradoException {
        Moto motoParaDeletar = getById(id);
        motoRepository.delete(motoParaDeletar);
    }

    public long countTotal() {
        securityUtils.checkAdminAccess();
        return motoRepository.count();
    }

    public List<Map<String, Object>> countByEstado() {
        securityUtils.checkAdminAccess();

        return motoRepository.countMotosByEstado();
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/services/PatioService.java
================================================================================

package br.com.geomottu.api.services;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.patio.PatioDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.model.entities.Patio;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.repository.FilialRepository;
import br.com.geomottu.api.repository.PatioRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class PatioService {

    private final PatioRepository patioRepository;
    private final FilialRepository filialRepository;
    private final SecurityUtils securityUtils;

    public Patio save(PatioDto dto) throws IdNaoEncontradoException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();

        Patio patio = new Patio(dto);

        if (securityUtils.isAdmin(usuarioLogado)) {
            Filial filial = filialRepository.findById(dto.filialId())
                    .orElseThrow(() -> new IdNaoEncontradoException("Filial não encontrada com ID: " + dto.filialId()));
            patio.setFilial(filial);
        } else {
            patio.setFilial(usuarioLogado.getFilial());
        }

        return patioRepository.save(patio);
    }

    public List<Patio> getAll() {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return patioRepository.findAll();
        } else {
            return patioRepository.findAllByFilial(usuarioLogado.getFilial());
        }
    }

    public Patio getById(Long id) throws IdNaoEncontradoException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        if (securityUtils.isAdmin(usuarioLogado)) {
            return patioRepository.findById(id)
                    .orElseThrow(() -> new IdNaoEncontradoException("Pátio não encontrado com ID: " + id));
        } else {
            return patioRepository.findByIdAndFilial(id, usuarioLogado.getFilial())
                    .orElseThrow(() -> new IdNaoEncontradoException("Pátio não encontrado ou não pertence à sua filial. ID: " + id));
        }
    }

    public Patio update(Long id, PatioDto dto) throws IdNaoEncontradoException {
        Usuario usuarioLogado = securityUtils.getUsuarioLogado();

        Patio patio = getById(id);

        if (securityUtils.isAdmin(usuarioLogado)) {
            Filial filial = filialRepository.findById(dto.filialId())
                    .orElseThrow(() -> new IdNaoEncontradoException("Filial não encontrada com ID: " + dto.filialId()));
            patio.setFilial(filial);
        } else {
            if (dto.filialId() != null && !patio.getFilial().getId().equals(dto.filialId())) {
                throw new AccessDeniedException("Usuários não podem mover um pátio para outra filial.");
            }
        }

        patio.setNome(dto.nome());
        patio.setCapacidadeTotal(dto.capacidadeTotal());

        return patioRepository.save(patio);
    }

    public void delete(Long id) throws IdNaoEncontradoException {
        Patio patioParaDeletar = getById(id);
        patioRepository.delete(patioParaDeletar);
    }

    public long countTotal() {
        securityUtils.checkAdminAccess();

        return patioRepository.count();
    }
}


================================================================================
ARQUIVO: src/main/java/br/com/geomottu/api/services/UsuarioService.java
================================================================================

package br.com.geomottu.api.services;

import br.com.geomottu.api.config.security.SecurityUtils;
import br.com.geomottu.api.dto.usuario.UpdateRoleDto;
import br.com.geomottu.api.dto.usuario.UsuarioDto;
import br.com.geomottu.api.dto.usuario.UsuarioGetDto;
import br.com.geomottu.api.exceptions.IdNaoEncontradoException;
import br.com.geomottu.api.exceptions.UsuarioJaCadastradoException;
import br.com.geomottu.api.model.entities.Filial;
import br.com.geomottu.api.model.entities.Usuario;
import br.com.geomottu.api.repository.FilialRepository;
import br.com.geomottu.api.repository.UsuarioRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UsuarioService {

    private final UsuarioRepository usuarioRepository;
    private final FilialRepository filialRepository;
    private final PasswordEncoder passwordEncoder;
    private final SecurityUtils securityUtils;

    // Create (Auto cadastro disponível para todos os usuários)
    public Usuario register(UsuarioDto dto) throws UsuarioJaCadastradoException, IdNaoEncontradoException {
        if (usuarioRepository.findByNomeIgnoreCase(dto.nome()).isPresent()) {
            throw new UsuarioJaCadastradoException();
        }

        Filial filial = filialRepository.findById(dto.filialId())
                .orElseThrow(IdNaoEncontradoException::new);

        Usuario usuario = new Usuario();
        usuario.setNome(dto.nome());
        usuario.setSenha(passwordEncoder.encode(dto.senha()));
        usuario.setTipoPerfil(2);
        usuario.setFilial(filial);


        return usuarioRepository.save(usuario);
    }

    public List<Usuario> getAll() {
        securityUtils.checkAdminAccess();
        return usuarioRepository.findAll();
    }

    public Usuario getById(Long id) throws IdNaoEncontradoException {
        securityUtils.checkAdminOrOwnerAccess(id);
        return usuarioRepository.findById(id)
                .orElseThrow(() -> new IdNaoEncontradoException("Usuário não encontrado com ID: " + id));
    }

    public Usuario getByName(String nome) {
        Usuario usuario = usuarioRepository.findByNomeIgnoreCase(nome)
                .orElseThrow(() -> new NoSuchElementException("Usuário não encontrado com nome: " + nome));
        securityUtils.checkAdminOrOwnerAccess(usuario.getId());
        return usuario;
    }

    public Usuario update(Long id, UsuarioDto dto) throws IdNaoEncontradoException {
        securityUtils.checkAdminOrOwnerAccess(id);

        Usuario usuarioLogado = securityUtils.getUsuarioLogado();
        Usuario usuarioParaAtualizar = usuarioRepository.findById(id)
                .orElseThrow(() -> new IdNaoEncontradoException("Usuário não encontrado com ID: " + id));

        usuarioParaAtualizar.setNome(dto.nome());
        usuarioParaAtualizar.setSenha(passwordEncoder.encode(dto.senha()));

        if (securityUtils.isAdmin(usuarioLogado)) {
            Filial filial = filialRepository.findById(dto.filialId())
                    .orElseThrow(() -> new IdNaoEncontradoException("Filial não encontrada com ID: " + id));
            usuarioParaAtualizar.setTipoPerfil(dto.tipoPerfil());
            usuarioParaAtualizar.setFilial(filial);
        } else {
            if (!usuarioParaAtualizar.getFilial().getId().equals(dto.filialId()) || !usuarioParaAtualizar.getTipoPerfil().equals(dto.tipoPerfil())) {
                throw new AccessDeniedException("Usuários não podem alterar a própria filial ou perfil.");
            }
        }

        return usuarioRepository.save(usuarioParaAtualizar);
    }

    public Usuario updateRole(Long userId, UpdateRoleDto dto) throws IdNaoEncontradoException {
        securityUtils.checkAdminAccess();
        Usuario adminLogado = securityUtils.getUsuarioLogado();

        if (adminLogado.getId().equals(userId)) {
            throw new IllegalArgumentException("Administradores não podem alterar o próprio perfil através desta funcionalidade.");
        }
        if (dto.tipoPerfil() < 1 || dto.tipoPerfil() > 2) {
            throw new IllegalArgumentException("Tipo de perfil inválido. Use 1 para ADMIN ou 2 para USER.");
        }

        Usuario usuarioParaAtualizar = usuarioRepository.findById(userId)
                .orElseThrow(() -> new IdNaoEncontradoException("Usuário não encontrado com ID: " + userId));
        usuarioParaAtualizar.setTipoPerfil(dto.tipoPerfil());

        return usuarioRepository.save(usuarioParaAtualizar);
    }

    public void delete(Long id) throws IdNaoEncontradoException {
        securityUtils.checkAdminOrOwnerAccess(id);
        if (!usuarioRepository.existsById(id)) {
            throw new IdNaoEncontradoException("Usuário não encontrado com ID: " + id);
        }
        usuarioRepository.deleteById(id);
    }

    public long countTotal() {
        securityUtils.checkAdminAccess();

        return usuarioRepository.count();
    }

}


================================================================================
ARQUIVO: src/main/resources/application.properties
================================================================================

spring.application.name=api

spring.datasource.url=jdbc:oracle:thin:@oracle.fiap.com.br:1521/orcl
spring.datasource.username=rm558043
spring.datasource.password=fiap24
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect

# spring.flyway.baseline-on-migrate=true
# spring.flyway.baseline-version=4

spring.jpa.hibernate.ddl-auto=validate


================================================================================
ARQUIVO: src/main/resources/db/migration/V1__create_and_insert_filial.sql
================================================================================

CREATE SEQUENCE SQ_T_GEOMOTTU_FILIAL START WITH 1 INCREMENT BY 1;

-- Cria a tabela de filial
CREATE TABLE T_GEOMOTTU_FILIAL (
    id_filial NUMBER(19) NOT NULL PRIMARY KEY,
    nm_filial VARCHAR2(255) NOT NULL,
    pais_filial VARCHAR2(255) NOT NULL,
    nm_telefone VARCHAR2(20),
    ds_email VARCHAR2(50),
    estado VARCHAR2(255),
    sigla_estado VARCHAR2(2),
    cidade VARCHAR2(255),
    rua VARCHAR2(255)
);

INSERT INTO T_GEOMOTTU_FILIAL (id_filial, nm_filial, pais_filial, nm_telefone, ds_email, estado, sigla_estado, cidade, rua) VALUES
(SQ_T_GEOMOTTU_FILIAL.nextval, 'Mottu - Sede São Paulo', 'BRASIL', '+5511999990001', 'contato.sp@mottu.com.br', 'São Paulo', 'SP', 'São Paulo', 'Av. Paulista, 1000');

INSERT INTO T_GEOMOTTU_FILIAL (id_filial, nm_filial, pais_filial, nm_telefone, ds_email, estado, sigla_estado, cidade, rua) VALUES
(SQ_T_GEOMOTTU_FILIAL.nextval, 'Mottu - Hub Rio de Janeiro', 'BRASIL', '+5521999990002', 'contato.rj@mottu.com.br', 'Rio de Janeiro', 'RJ', 'Rio de Janeiro', 'Av. Atlântica, 2000');

INSERT INTO T_GEOMOTTU_FILIAL (id_filial, nm_filial, pais_filial, nm_telefone, ds_email, estado, sigla_estado, cidade, rua) VALUES
(SQ_T_GEOMOTTU_FILIAL.nextval, 'Mottu - CDMX Polanco', 'MEXICO', '+5255999990003', 'contacto.cdmx@mottu.mx', 'Ciudad de México', 'CM', 'Ciudad de México', 'Av. Presidente Masaryk, 300');

INSERT INTO T_GEOMOTTU_FILIAL (id_filial, nm_filial, pais_filial, nm_telefone, ds_email, estado, sigla_estado, cidade, rua) VALUES
(SQ_T_GEOMOTTU_FILIAL.nextval, 'Mottu - Guadalajara Centro', 'MEXICO', '+5233999990004', 'contacto.gdl@mottu.mx', 'Jalisco', 'JA', 'Guadalajara', 'Av. Juárez, 400');

INSERT INTO T_GEOMOTTU_FILIAL (id_filial, nm_filial, pais_filial, nm_telefone, ds_email, estado, sigla_estado, cidade, rua) VALUES
(SQ_T_GEOMOTTU_FILIAL.nextval, 'Mottu - Monterrey', 'MEXICO', '+5281999990005', 'contacto.mty@mottu.mx', 'Nuevo León', 'NL', 'Monterrey', 'Calz. del Valle, 500');


================================================================================
ARQUIVO: src/main/resources/db/migration/V2__create_and_insert_usuario.sql
================================================================================

CREATE SEQUENCE SQ_T_GEOMOTTU_USUARIO START WITH 1 INCREMENT BY 1;

CREATE TABLE T_GEOMOTTU_USUARIO (
    id_usuario NUMBER(19) NOT NULL PRIMARY KEY,
    nm_usuario VARCHAR2(25) NOT NULL UNIQUE,
    ds_senha VARCHAR2(100) NOT NULL,
    tp_perfil NUMBER(10) NOT NULL,
    id_filial NUMBER(19),
    CONSTRAINT fk_usuario_filial FOREIGN KEY (id_filial) REFERENCES T_GEOMOTTU_FILIAL(id_filial)
);

-- Senha para 'admin': @Admin123
INSERT INTO T_GEOMOTTU_USUARIO (id_usuario, nm_usuario, ds_senha, tp_perfil, id_filial)
VALUES (SQ_T_GEOMOTTU_USUARIO.nextval, 'admin', '$2a$10$r6g1jV35gVdJqbgV.E7a1eG.M9aVFfaufoGkKPSvge30ttH98aYba', 1, 1);

-- Senha para 'joao.silva': $User5432
INSERT INTO T_GEOMOTTU_USUARIO (id_usuario, nm_usuario, ds_senha, tp_perfil, id_filial)
VALUES (SQ_T_GEOMOTTU_USUARIO.nextval, 'joao.silva', '$2a$10$wK6POr9IdqBw82r15m212u5a2nE8R/9JzVAOkzMvBCy8.p62jA8J6', 2, 1);

-- Senha para 'maria.souza': $User1489
INSERT INTO T_GEOMOTTU_USUARIO (id_usuario, nm_usuario, ds_senha, tp_perfil, id_filial)
VALUES (SQ_T_GEOMOTTU_USUARIO.nextval, 'maria.souza', '$2a$10$89g9A9bkyHAY1qD9N/yXn.j7xW2k5dJ3B8q0o5PzY9f3xG2k8w9lC', 2, 2);

-- Senha para 'carlos.gomez': $User5892
INSERT INTO T_GEOMOTTU_USUARIO (id_usuario, nm_usuario, ds_senha, tp_perfil, id_filial)
VALUES (SQ_T_GEOMOTTU_USUARIO.nextval, 'carlos.gomez', '$2a$10$q/6X9V.Y8L2p4/J0vJ0f2u8n7y8f8p6j1o2n4g2l3k4h5j6k7l8m', 2, 3);

-- Senha para 'ana.hernandez': $User1234
INSERT INTO T_GEOMOTTU_USUARIO (id_usuario, nm_usuario, ds_senha, tp_perfil, id_filial)
VALUES (SQ_T_GEOMOTTU_USUARIO.nextval, 'ana.hernandez', '$2a$10$s/3O7z.W7k1o5p9v9a8d7u6f5g4h3j2k1l0n9m8b7v6c5d4e3f2g', 2, 3);

================================================================================
ARQUIVO: src/main/resources/db/migration/V3__create_and_insert_patio.sql
================================================================================

CREATE SEQUENCE SQ_T_GEOMOTTU_PATIO START WITH 1 INCREMENT BY 1;

CREATE TABLE T_GEOMOTTU_PATIO (
    id_patio NUMBER(19) NOT NULL PRIMARY KEY,
    nm_patio VARCHAR2(50),
    nr_capacidade NUMBER(10) NOT NULL,
    id_filial NUMBER(19),
    CONSTRAINT fk_patio_filial FOREIGN KEY (id_filial) REFERENCES T_GEOMOTTU_FILIAL(id_filial)
);

INSERT INTO T_GEOMOTTU_PATIO (id_patio, nm_patio, nr_capacidade, id_filial) VALUES (SQ_T_GEOMOTTU_PATIO.nextval, 'Pátio Central SP', 250, 1);
INSERT INTO T_GEOMOTTU_PATIO (id_patio, nm_patio, nr_capacidade, id_filial) VALUES (SQ_T_GEOMOTTU_PATIO.nextval, 'Pátio Zona Sul SP', 150, 1);
INSERT INTO T_GEOMOTTU_PATIO (id_patio, nm_patio, nr_capacidade, id_filial) VALUES (SQ_T_GEOMOTTU_PATIO.nextval, 'Pátio Copacabana RJ', 180, 2);
INSERT INTO T_GEOMOTTU_PATIO (id_patio, nm_patio, nr_capacidade, id_filial) VALUES (SQ_T_GEOMOTTU_PATIO.nextval, 'Pátio Polanco CDMX', 300, 3);
INSERT INTO T_GEOMOTTU_PATIO (id_patio, nm_patio, nr_capacidade, id_filial) VALUES (SQ_T_GEOMOTTU_PATIO.nextval, 'Pátio Jalisco GDL', 220, 4);

================================================================================
ARQUIVO: src/main/resources/db/migration/V4__create_and_insert_moto.sql
================================================================================

CREATE SEQUENCE SQ_T_GEOMOTTU_MOTO START WITH 1 INCREMENT BY 1;

CREATE TABLE T_GEOMOTTU_MOTO (
    id_moto NUMBER(19) NOT NULL PRIMARY KEY,
    nr_placa VARCHAR2(8) UNIQUE,
    nr_chassi VARCHAR2(50) UNIQUE,
    tp_modelo VARCHAR2(255) NOT NULL,
    st_operacional VARCHAR2(255) NOT NULL,
    id_patio NUMBER(19),
    CONSTRAINT fk_moto_patio FOREIGN KEY (id_patio) REFERENCES T_GEOMOTTU_PATIO(id_patio)
);

INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'BRA1A11', 'CHASSIBR001', 'MOTTUPOP', 'LIVRE', 1);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'BRA2B22', 'CHASSIBR002', 'MOTTUPOP', 'ALUGADA', 1);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'BRA3C33', 'CHASSIBR003', 'MOTTUSPORT', 'MANUTENCAO', 1);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'BRA4D44', 'CHASSIBR004', 'MOTTUE', 'LIVRE', 2);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'BRA5E55', 'CHASSIBR005', 'MOTTUSPORT', 'LIVRE', 3);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'MEX1X11', 'CHASSIMX001', 'MOTTUPOP', 'ALUGADA', 4);
INSERT INTO T_GEOMOTTU_MOTO (id_moto, nr_placa, nr_chassi, tp_modelo, st_operacional, id_patio) VALUES (SQ_T_GEOMOTTU_MOTO.nextval, 'MEX2Y22', 'CHASSIMX002', 'MOTTUE', 'LIVRE', 4);

================================================================================
ARQUIVO: src/main/resources/static/css/style.css
================================================================================

/* Definição de Variáveis de Cor */
:root {
    --mottu-green: #9dff00;
    --mottu-dark: #1a1a1a;
    --mottu-gray: #333;
    --bs-body-color: #f8f9fa;
    --bs-body-bg: var(--mottu-dark);
}

/* Estilo do corpo da página */
body {
    background-color: var(--bs-body-bg);
    color: var(--bs-body-color);
}


/* Cartões */
.card-custom {
    background-color: var(--mottu-gray);
    border: 1px solid var(--mottu-green);
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.card-custom:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(157, 255, 0, 0.2);
}
.card-custom .card-header {
    background-color: var(--mottu-dark);
    border-bottom: 1px solid var(--mottu-green);
    color: var(--mottu-green);
}

/* Botões */
.btn-mottu {
    background-color: var(--mottu-green);
    color: var(--mottu-dark);
    font-weight: bold;
    border: 1px solid var(--mottu-green);
    transition: all 0.2s ease;
}
.btn-mottu:hover {
    background-color: #89dd00;
    color: #000;
    border-color: #89dd00;
}

.btn-outline-mottu {
    color: var(--mottu-green);
    border-color: var(--mottu-green);
    font-weight: bold;
}
.btn-outline-mottu:hover {
    background-color: var(--mottu-green);
    color: var(--mottu-dark);
    border-color: var(--mottu-green);
}

/* Formulários */
.form-control {
    background-color: var(--mottu-gray);
    border: 1px solid #555;
    color: var(--bs-body-color);
}
.form-control:focus {
    background-color: var(--mottu-gray);
    border-color: var(--mottu-green);
    color: var(--bs-body-color);
    box-shadow: 0 0 0 0.25rem rgba(157, 255, 0, 0.25);
}
.form-select {
    background-color: var(--mottu-gray);
    border: 1px solid #555;
    color: var(--bs-body-color);
}
.form-label {
    color: var(--mottu-green);
}

/* Navbar */
.navbar-brand {
    color: var(--mottu-green) !important;
}
.nav-link {
    transition: color 0.2s;
}
.nav-link:hover {
    color: var(--mottu-green) !important;
}

/* Alertas */
.alert-mottu-success {
    background-color: #2a3a2b;
    color: #a3e635;
    border: 1px solid #a3e635;
}
.alert-mottu-error {
    background-color: #4d2d2d;
    color: #ff8c8c;
    border: 1px solid #ff8c8c;
}

================================================================================
ARQUIVO: src/main/resources/static/js/scripts.js
================================================================================



================================================================================
ARQUIVO: src/main/resources/templates/acesso-negado.html
================================================================================

<!DOCTYPE html>
<html lang="pt-br" xmlns:th="http://www.thymeleaf.org">
<head>
    <th:block th:replace="~{fragments/_layout :: head(title='Acesso Negado')}"></th:block>
</head>
<body class="d-flex flex-column min-vh-100">

<header th:replace="~{fragments/_layout :: header}"></header>

<main class="container flex-grow-1 d-flex align-items-center justify-content-center text-center">
    <div>
        <h1 class="display-1 fw-bold" style="color: var(--mottu-green);">403</h1>
        <h2 class="display-4">Acesso Negado</h2>
        <p class="lead">
            Você não tem permissão para acessar esta página.
        </p>
        <a th:href="@{/}" class="btn btn-mottu mt-3">Voltar para a Página Inicial</a>
    </div>
</main>

<footer th:replace="~{fragments/_layout :: footer}"></footer>
<th:block th:replace="~{fragments/_layout :: scripts}"></th:block>

</body>
</html>

================================================================================
ARQUIVO: src/main/resources/templates/home.html
================================================================================

<!DOCTYPE html>
<html lang="pt-br" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <th:block th:replace="~{fragments/_layout :: head(title='Página Inicial')}"></th:block>
</head>
<body class="d-flex flex-column min-vh-100">

<header th:replace="~{fragments/_layout :: header}"></header>

<main class="container flex-grow-1 my-5">
    <div class="text-center">
        <h1 class="display-4 fw-bold">Bem-vindo ao <span style="color: var(--mottu-green);">GeoMottu</span>!</h1>
        <p class="lead">Sua plataforma central para gerenciamento de frotas.</p>
    </div>

    <div class="row mt-5 g-4 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card-custom h-100">
                <div class="card-body text-center d-flex flex-column">
                    <i class="bi bi-p-circle-fill display-1" style="color: var(--mottu-green);"></i>
                    <h4 class="card-title mt-3">Gerenciar Pátios</h4>
                    <p class="card-text">Visualize e administre os pátios de estacionamento.</p>
                    <a th:href="@{/patios}" class="btn btn-outline-mottu mt-auto">Acessar</a>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-4">
            <div class="card-custom h-100">
                <div class="card-body text-center d-flex flex-column">
                    <i class="bi bi-bicycle display-1" style="color: var(--mottu-green);"></i>
                    <h4 class="card-title mt-3">Gerenciar Motos</h4>
                    <p class="card-text">Cadastre, edite e controle o status das motos da frota.</p>
                    <a th:href="@{/motos}" class="btn btn-outline-mottu mt-auto">Acessar</a>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-lg-4" sec:authorize="hasRole('ADMIN')">
            <div class="card-custom h-100">
                <div class="card-body text-center d-flex flex-column">
                    <i class="bi bi-bar-chart-line-fill display-1" style="color: var(--mottu-green);"></i>
                    <h4 class="card-title mt-3">Dashboard Admin</h4>
                    <p class="card-text">Veja dados e estatísticas gerais do sistema.</p>
                    <a th:href="@{/admin/dashboard}" class="btn btn-outline-mottu mt-auto">Acessar</a>
                </div>
            </div>
        </div>
    </div>
</main>

<footer th:replace="~{fragments/_layout :: footer}"></footer>
<th:block th:replace="~{fragments/_layout :: scripts}"></th:block>

</body>
</html>

================================================================================
ARQUIVO: src/main/resources/templates/login.html
================================================================================

<!DOCTYPE html>
<html lang="pt-br" xmlns:th="http://www.thymeleaf.org">
<head>
    <th:block th:replace="~{fragments/_layout :: head(title='Login')}"></th:block>
</head>
<body class="d-flex flex-column min-vh-100">

<header th:replace="~{fragments/_layout :: header}"></header>

<main class="container flex-grow-1 d-flex align-items-center justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card-custom">
            <div class="card-header text-center">
                <h2 class="fw-bold mb-0">Login</h2>
            </div>
            <div class="card-body p-4">
                <div th:if="${param.error}" class="alert alert-mottu-error" role="alert">
                    Usuário ou senha inválidos.
                </div>
                <div th:if="${param.logout}" class="alert alert-mottu-success" role="alert">
                    Você saiu do sistema com sucesso.
                </div>
                <div th:if="${successMessage}" class="alert alert-mottu-success" role="alert" th:text="${successMessage}"></div>

                <form th:action="@{/login}" method="post">
                    <div class="mb-3">
                        <label for="username" class="form-label">Usuário</label>
                        <input type="text" class="form-control" id="username" name="username" required autofocus>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Senha</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-mottu">Entrar</button>
                    </div>
                </form>
                <div class="text-center mt-3">
                    <p>Não tem uma conta? <a th:href="@{/registro}" class="link-light">Registre-se</a></p>
                </div>
            </div>
        </div>
    </div>
</main>

<footer th:replace="~{fragments/_layout :: footer}"></footer>
<th:block th:replace="~{fragments/_layout :: scripts}"></th:block>

</body>
</html>

================================================================================
ARQUIVO: src/main/resources/templates/registro.html
================================================================================

<!DOCTYPE html>
<html lang="pt-br" xmlns:th="http://www.thymeleaf.org">
<head>
    <th:block th:replace="~{fragments/_layout :: head(title='Registro de Usuário')}"></th:block>
</head>
<body class="d-flex flex-column min-vh-100">

<header th:replace="~{fragments/_layout :: header}"></header>

<main class="container flex-grow-1 d-flex align-items-center justify-content-center">
    <div class="col-md-6 col-lg-5">
        <div class="card-custom">
            <div class="card-header text-center">
                <h2 class="fw-bold mb-0">Criar Nova Conta</h2>
            </div>
            <div class="card-body p-4">
                <div th:if="${errorMessage}" class="alert alert-mottu-error" role="alert" th:text="${errorMessage}"></div>

                <form th:action="@{/registrar}" th:object="${usuarioDto}" method="post">
                    <div class="mb-3">
                        <label for="nome" class="form-label">Nome de Usuário</label>
                        <input type="text" class="form-control" id="nome" th:field="*{nome}" required>
                        <div class="text-danger small mt-1" th:if="${#fields.hasErrors('nome')}" th:errors="*{nome}"></div>
                    </div>
                    <div class="mb-3">
                        <label for="senha" class="form-label">Senha</label>
                        <input type="password" class="form-control" id="senha" th:field="*{senha}" required>
                        <div class="text-danger small mt-1" th:if="${#fields.hasErrors('senha')}" th:errors="*{senha}"></div>
                    </div>
                    <div class="mb-3">
                        <label for="filialId" class="form-label">Filial</label>
                        <select class="form-select" id="filialId" th:field="*{filialId}" required>
                            <option value="" selected disabled>Selecione sua filial</option>
                            <option th:each="filial : ${filiais}"
                                    th:value="${filial.id}"
                                    th:text="${filial.nome} + ' (' + ${filial.pais} + ')'"></option>
                        </select>
                        <div class="text-danger small mt-1" th:if="${#fields.hasErrors('filialId')}" th:errors="*{filialId}"></div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-mottu">Registrar</button>
                    </div>
                </form>
                <div class="text-center mt-3">
                    <p>Já tem uma conta? <a th:href="@{/login}" class="link-light">Faça login</a></p>
                </div>
            </div>
        </div>
    </div>
</main>

<footer th:replace="~{fragments/_layout :: footer}"></footer>
<th:block th:replace="~{fragments/_layout :: scripts}"></th:block>

</body>
</html>

================================================================================
ARQUIVO: src/main/resources/templates/fragments/_layout.html
================================================================================

<!DOCTYPE html>
<html lang="pt-br" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title th:text="${title} ?: 'GeoMottu'">GeoMottu</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">

    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body class="d-flex flex-column min-vh-100">

<header th:fragment="header">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold" th:href="@{/}">
                <i class="bi bi-geo-alt-fill me-2"></i>GeoMottu
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto" sec:authorize="isAuthenticated()">
                    <li class="nav-item">
                        <a class="nav-link" th:href="@{/patios}">Pátios</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" th:href="@{/motos}">Motos</a>
                    </li>
                    <li class="nav-item" sec:authorize="hasRole('ADMIN')">
                        <a class="nav-link" th:href="@{/filiais}">Filiais</a>
                    </li>
                    <li class="nav-item" sec:authorize="hasRole('ADMIN')">
                        <a class="nav-link" th:href="@{/usuarios}">Usuários</a>
                    </li>
                    <li class="nav-item" sec:authorize="hasRole('ADMIN')">
                        <a class="nav-link" th:href="@{/admin/dashboard}">Dashboard</a>
                    </li>
                </ul>
                <div class="navbar-nav ms-auto" sec:authorize="isAuthenticated()">
                    <span class="navbar-text me-3">
                        Olá, <strong sec:authentication="name">Usuário</strong>!
                    </span>
                    <form th:action="@{/logout}" method="post" class="d-flex">
                        <button class="btn btn-outline-mottu" type="submit">
                            <i class="bi bi-box-arrow-right me-2"></i>Sair
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </nav>
</header>

<main class="flex-grow-1" th:fragment="content">
</main>

<footer class="bg-dark text-white text-center py-3 mt-auto" th:fragment="footer">
    <div class="container">
        &copy; 2025 GeoMottu - Todos os direitos reservados.
    </div>
</footer>

<th:block th:fragment="scripts">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script th:src="@{/js/scripts.js}"></script>
</th:block>

</body>
</html>

================================================================================
ARQUIVO: src/test/java/br/com/geomottu/api/ApiApplicationTests.java
================================================================================

package br.com.geomottu.api;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ApiApplicationTests {

	@Test
	void contextLoads() {
	}

}


